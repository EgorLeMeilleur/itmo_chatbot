from recommendations import get_recommendations

class ChatBot:
    def __init__(self, programs_data): self.programs = {"ai": programs_data[0], "product": programs_data[1]}
    def handle_command(self, command):
        command = command.lower().strip()
        if "–ø—Ä–∏–≤–µ—Ç" in command: self.show_welcome_message()
        elif "—Å—Ä–∞–≤–Ω" in command: self.compare_programs()
        elif "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ ai" in command or "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" in command: self.describe_program("ai")
        elif "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç" in command or "–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π" in command: self.describe_program("product")
        elif "–ø–æ—Å–æ–≤–µ—Ç—É–π" in command or "—Ä–µ–∫–æ–º–µ–Ω–¥" in command: self.initiate_recommendation_flow()
        elif "–ø–æ–∫–∞" in command or "–≤—ã—Ö–æ–¥" in command: return False
        else: print("\nü§ñ –Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n- '—Å—Ä–∞–≤–Ω–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã'\n- '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ ai'\n- '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –∏–∏'\n- '–ø–æ—Å–æ–≤–µ—Ç—É–π –∫—É—Ä—Å—ã'\n- '–≤—ã—Ö–æ–¥'")
        return True
    def show_welcome_message(self): print(f"\nü§ñ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –≤ –ò–¢–ú–û:\n1. {self.programs['ai']['title']}\n2. {self.programs['product']['title']}\n\n–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: '—Å—Ä–∞–≤–Ω–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã' –∏–ª–∏ '–ø–æ—Å–æ–≤–µ—Ç—É–π –∫—É—Ä—Å—ã'.")
    def describe_program(self, key):
        program = self.programs.get(key)
        if not program: print("–¢–∞–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); return
        print(f"\n--- –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –ø—Ä–æ–≥—Ä–∞–º–º—ã ¬´{program['title']}¬ª ---")
        print("\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:"); [print(f"- {c}") for c in program['core_courses']] if program['core_courses'] else print("–ù–µ –Ω–∞–π–¥–µ–Ω—ã.")
        print("\n–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø–æ –≤—ã–±–æ—Ä—É:"); [print(f"- {e}") for e in program['elective_courses']] if program['elective_courses'] else print("–ù–µ –Ω–∞–π–¥–µ–Ω—ã.")
    def compare_programs(self):
        ai, product = self.programs['ai'], self.programs['product']
        print("\n--- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω ---")
        ai_core, product_core = set(ai['core_courses']), set(product['core_courses'])
        common_core = ai_core.intersection(product_core); unique_to_ai = ai_core.difference(product_core); unique_to_product = product_core.difference(ai_core)
        print(f"\n–û–±—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è –æ–±–µ–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º:"); [print(f"- {c}") for c in sorted(list(common_core))] if common_core else print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
        print(f"\n–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è ¬´{ai['title']}¬ª:"); [print(f"- {c}") for c in sorted(list(unique_to_ai))] if unique_to_ai else print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
        print(f"\n–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è ¬´{product['title']}¬ª:"); [print(f"- {c}") for c in sorted(list(unique_to_product))] if unique_to_product else print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
        print("\n–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ: –ø—Ä–æ–≥—Ä–∞–º–º–∞ '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' –±–æ–ª—å—à–µ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –ò–ò, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ '–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –ò–ò' –¥–µ–ª–∞–µ—Ç –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏ –∏ –∫–æ–º–º–µ—Ä—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ò–ò-—Ä–µ—à–µ–Ω–∏–π.")
    def initiate_recommendation_flow(self):
        print("\nü§ñ –ß—Ç–æ–±—ã –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –º–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ –≤–∞—Å.")
        while True:
            bg_choice = input("–û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:\n1. –°–∏–ª—å–Ω—ã–π (—É–≤–µ—Ä–µ–Ω–Ω–æ –ø–∏—à—É –∫–æ–¥)\n2. –°–ª–∞–±—ã–π (–Ω—É–∂–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å)\n–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()
            if bg_choice in ['1', '2']: background = 'strong_programming' if bg_choice == '1' else 'weak_programming'; break
            else: print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")
        while True:
            goal_choice = input("\n–ß—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ?\n1. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ (ML-–∏–Ω–∂–µ–Ω–µ—Ä, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫)\n2. –ü—Ä–æ–¥—É–∫—Ç–æ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ (–ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)\n3. –ù–∞—É—á–Ω–∞—è –∫–∞—Ä—å–µ—Ä–∞ (–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –∞—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞)\n–í–∞—à –≤—ã–±–æ—Ä (1/2/3): ").strip()
            if goal_choice in ['1', '2', '3']: goals = {'1': 'tech', '2': 'product', '3': 'research'}[goal_choice]; break
            else: print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")
        while True:
            program_choice = input(f"\n–î–ª—è –∫–∞–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —ç–ª–µ–∫—Ç–∏–≤–∞–º?\n1. {self.programs['ai']['title']}\n2. {self.programs['product']['title']}\n–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()
            if program_choice in ['1', '2']: electives = self.programs['ai']['elective_courses'] if program_choice == '1' else self.programs['product']['elective_courses']; break
            else: print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")
        print(f"\n--- –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ---\n{get_recommendations(background, goals, electives)}")